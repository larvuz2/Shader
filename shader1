<!DOCTYPE html>
<html>
<head>
    <title>Complex Number Shader Art</title>
    <style>
        body { margin: 0; padding: 20px; background: #111; color: #fff; font-family: Arial; }
        canvas { width: 100%; max-width: 800px; height: auto; }
        .controls { margin-top: 20px; }
        .slider-container { margin: 10px 0; }
        label { display: inline-block; width: 120px; }
    </style>
</head>
<body>
    <canvas id="canvas"></canvas>
    <div class="controls">
        <div class="slider-container">
            <label>Point A1 X:</label>
            <input type="range" id="a1x" min="-1" max="1" step="0.01" value="0.32">
        </div>
        <div class="slider-container">
            <label>Point A1 Y:</label>
            <input type="range" id="a1y" min="-1" max="1" step="0.01" value="-0.45">
        </div>
        <div class="slider-container">
            <label>Point B1 X:</label>
            <input type="range" id="b1x" min="-1" max="1" step="0.01" value="-0.71">
        </div>
        <div class="slider-container">
            <label>Point B1 Y:</label>
            <input type="range" id="b1y" min="-1" max="1" step="0.01" value="0.53">
        </div>
        <div class="slider-container">
            <label>Color Phase:</label>
            <input type="range" id="phase" min="0" max="1" step="0.01" value="0.15">
        </div>
        <div class="slider-container">
            <label>Zoom:</label>
            <input type="range" id="zoom" min="0.5" max="4" step="0.01" value="2">
        </div>
    </div>

    <script type="x-shader/x-fragment" id="fragmentShader">
        precision mediump float;
        
        uniform vec2 u_resolution;
        uniform float u_time;
        uniform vec2 u_a1;
        uniform vec2 u_b1;
        uniform float u_phase;
        uniform float u_zoom;

        #define PI 3.141592653589793

        vec2 cx_mul(vec2 a, vec2 b) {
            return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);
        }

        vec2 cx_div(vec2 a, vec2 b) {
            float denominator = b.x*b.x + b.y*b.y;
            return vec2((a.x*b.x + a.y*b.y)/denominator, (a.y*b.x - a.x*b.y)/denominator);
        }

        vec2 cx_pow(vec2 v, float p) {
            float r = length(v);
            float theta = atan(v.y, v.x);
            return pow(r, p) * vec2(cos(theta * p), sin(theta * p));
        }

        vec2 cx_log(vec2 a) {
            float rpart = sqrt((a.x*a.x)+(a.y*a.y));
            float ipart = atan(a.y, a.x);
            if (ipart > PI) ipart = ipart - (2.0*PI);
            return vec2(log(rpart), ipart);
        }

        vec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {
            return a + b*cos(2.*PI*(c*t+d + u_phase));
        }

        void main() {
            vec2 uv = (gl_FragCoord.xy - 0.5 * u_resolution.xy) / min(u_resolution.y, u_resolution.x);
            vec2 z = uv * u_zoom;

            // Define static points
            vec2 a0 = vec2(0.32, -0.45);
            vec2 a2 = vec2(-0.31, 0.38);
            vec2 a3 = vec2(-0.12, 0.04);
            vec2 b0 = vec2(-0.71, 0.53);
            vec2 b2 = vec2(-0.24, 0.31);
            vec2 b3 = vec2(-0.01, -0.42);

            // Use dynamic points from sliders
            vec2 a1 = u_a1;
            vec2 b1 = u_b1;

            // Calculate polynomials
            vec2 polyA = a0
                + cx_mul(a1, z)
                + cx_mul(a2, cx_pow(z, 2.0))
                + cx_mul(a3, cx_pow(z, 3.0));

            vec2 polyB = b0
                + cx_mul(b1, z)
                + cx_mul(b2, cx_pow(z, 2.0))
                + cx_mul(b3, cx_pow(z, 3.0));

            vec2 result = cx_div(polyA, polyB);
            float imaginary = cx_log(result).y / PI;

            vec3 col = palette(imaginary, 
                vec3(0.52, 0.45, 0.61),
                vec3(0.40, 0.42, 0.31),
                vec3(0.26, 0.30, 0.35),
                vec3(0.15, 0.4, 0.4));

            gl_FragColor = vec4(col, 1.0);
        }
    </script>

    <script>
        const canvas = document.getElementById('canvas');
        const gl = canvas.getContext('webgl');

        // Set up shader program
        const vertexShaderSource = `
            attribute vec2 a_position;
            void main() {
                gl_Position = vec4(a_position, 0, 1);
            }
        `;

        function createShader(gl, type, source) {
            const shader = gl.createShader(type);
            gl.shaderSource(shader, source);
            gl.compileShader(shader);
            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                console.error(gl.getShaderInfoLog(shader));
                gl.deleteShader(shader);
                return null;
            }
            return shader;
        }

        const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
        const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, 
            document.getElementById('fragmentShader').textContent);
        
        const program = gl.createProgram();
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);
        gl.linkProgram(program);
        gl.useProgram(program);

        // Set up rectangle covering the screen
        const positionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
            -1, -1,
            1, -1,
            -1, 1,
            -1, 1,
            1, -1,
            1, 1
        ]), gl.STATIC_DRAW);

        const positionLocation = gl.getAttribLocation(program, 'a_position');
        gl.enableVertexAttribArray(positionLocation);
        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

        // Uniform locations
        const resolutionLocation = gl.getUniformLocation(program, 'u_resolution');
        const timeLocation = gl.getUniformLocation(program, 'u_time');
        const a1Location = gl.getUniformLocation(program, 'u_a1');
        const b1Location = gl.getUniformLocation(program, 'u_b1');
        const phaseLocation = gl.getUniformLocation(program, 'u_phase');
        const zoomLocation = gl.getUniformLocation(program, 'u_zoom');

        // Slider references
        const sliders = {
            a1x: document.getElementById('a1x'),
            a1y: document.getElementById('a1y'),
            b1x: document.getElementById('b1x'),
            b1y: document.getElementById('b1y'),
            phase: document.getElementById('phase'),
            zoom: document.getElementById('zoom')
        };

        function resizeCanvas() {
            canvas.width = Math.min(window.innerWidth - 40, 800);
            canvas.height = canvas.width;
            gl.viewport(0, 0, canvas.width, canvas.height);
        }

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        let startTime = Date.now();
        function render() {
            const time = (Date.now() - startTime) / 1000;

            gl.uniform2f(resolutionLocation, canvas.width, canvas.height);
            gl.uniform1f(timeLocation, time);
            gl.uniform2f(a1Location, parseFloat(sliders.a1x.value), parseFloat(sliders.a1y.value));
            gl.uniform2f(b1Location, parseFloat(sliders.b1x.value), parseFloat(sliders.b1y.value));
            gl.uniform1f(phaseLocation, parseFloat(sliders.phase.value));
            gl.uniform1f(zoomLocation, parseFloat(sliders.zoom.value));

            gl.drawArrays(gl.TRIANGLES, 0, 6);
            requestAnimationFrame(render);
        }

        render();
    </script>
</body>
</html>
